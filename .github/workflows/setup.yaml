name: Setup

on:
  # triggered on all pull requests and push events to the master branch
  pull_request:
  push:
    branches:
      - master

env:
  BUILD_CACHE_KEY: "build-${{ github.sha }}"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get mdbook Latest Release Tag
        id: mdbookLatestRelease
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: rust-lang
          repo: mdBook
      - name: Retrieve Cached Build
        # if the cache key doesn't exist, it will create one when the job completes
        id: cacheBuild
        uses: actions/cache@v3
        with:
          path: book
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Build
        if: steps.cacheBuild.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/rust-lang/mdBook/releases/download/${{ steps.mdbookLatestRelease.outputs.release }}/mdbook-${{ steps.mdbookLatestRelease.outputs.release }}-x86_64-unknown-linux-gnu.tar.gz --output mdbook.tar.gz
          tar -xf mdbook.tar.gz
          ./mdbook build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve Cached Build
        uses: actions/cache@v3
        with:
          path: book
          key: ${{ env.BUILD_CACHE_KEY }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get Environment Name
        id: getEnvName
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: pr-${{ github.event.number }}
          if_false: "prod"
      - name: Deploy CloudFormation Stack
        id: deployStack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: docs-bluestone-dev-${{ steps.getEnvName.outputs.value }}
          template: cloudFormationTemplate.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ApplicationDomain=${{ steps.getEnvName.outputs.value }}.docs.bluestone.dev
      - name: Copy Build To S3
        run: |
          aws cloudformation describe-stack-resource \
            --stack-name ${{ steps.deployStack.outputs.stack-id }} \
            --logical-resource-id DeployBucket \
            --query "StackResourceDetail.PhysicalResourceId" \
            --output text \
          | xargs -I % aws s3 sync book s3://%
      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudformation describe-stack-resource \
            --stack-name ${{ steps.deployStack.outputs.stack-id }} \
            --logical-resource-id Distribution \
            --query "StackResourceDetail.PhysicalResourceId" \
            --output text \
          | xargs -I % aws cloudfront create-invalidation \
            --distribution-id % \
            --paths "/*"
